// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/database/models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5046594214003581896),
      name: 'Bill',
      lastPropertyId: const obx_int.IdUid(4, 7318630872504905238),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7955384740606013176),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6371580332003840085),
            name: 'products',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6857593765177658154),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7318630872504905238),
            name: 'clientId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 923033866719634236),
            relationTarget: 'Client')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8133119454326413977),
      name: 'Client',
      lastPropertyId: const obx_int.IdUid(5, 1778787442093384412),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1848104283746612188),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5305946011452316050),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 80647820487031942),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6461524637341058637),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1778787442093384412),
            name: 'hood',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5674168207490397179),
      name: 'Product',
      lastPropertyId: const obx_int.IdUid(6, 7792837319810027353),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1561393345972292914),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8364959402187969103),
            name: 'code',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1021373905571943540),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7686170874662947468),
            name: 'buyPrice',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1233883714659582199),
            name: 'sellPrice',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7792837319810027353),
            name: 'stock',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 5674168207490397179),
      lastIndexId: const obx_int.IdUid(1, 923033866719634236),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Bill: obx_int.EntityDefinition<Bill>(
        model: _entities[0],
        toOneRelations: (Bill object) => [object.client],
        toManyRelations: (Bill object) => {},
        getId: (Bill object) => object.id,
        setId: (Bill object, int id) {
          object.id = id;
        },
        objectToFB: (Bill object, fb.Builder fbb) {
          final productsOffset = fbb.writeListInt64(object.products);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, productsOffset);
          fbb.addInt64(2, object.date.millisecondsSinceEpoch);
          fbb.addInt64(3, object.client.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Bill()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..products = const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                .vTableGet(buffer, rootOffset, 6, [])
            ..date = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          object.client.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.client.attach(store);
          return object;
        }),
    Client: obx_int.EntityDefinition<Client>(
        model: _entities[1],
        toOneRelations: (Client object) => [],
        toManyRelations: (Client object) => {},
        getId: (Client object) => object.id,
        setId: (Client object, int id) {
          object.id = id;
        },
        objectToFB: (Client object, fb.Builder fbb) {
          final phoneOffset = fbb.writeString(object.phone);
          final nameOffset = fbb.writeString(object.name);
          final addressOffset = fbb.writeString(object.address);
          final hoodOffset = fbb.writeString(object.hood);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, phoneOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, addressOffset);
          fbb.addOffset(4, hoodOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Client()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..phone = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..address = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..hood = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '');

          return object;
        }),
    Product: obx_int.EntityDefinition<Product>(
        model: _entities[2],
        toOneRelations: (Product object) => [],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.id,
        setId: (Product object, int id) {
          object.id = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final codeOffset = fbb.writeString(object.code);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, codeOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.buyPrice);
          fbb.addInt64(4, object.sellPrice);
          fbb.addInt64(5, object.stock);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Product()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..code = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..buyPrice =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..sellPrice =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..stock =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Bill] entity fields to define ObjectBox queries.
class Bill_ {
  /// See [Bill.id].
  static final id = obx.QueryIntegerProperty<Bill>(_entities[0].properties[0]);

  /// See [Bill.products].
  static final products =
      obx.QueryIntegerVectorProperty<Bill>(_entities[0].properties[1]);

  /// See [Bill.date].
  static final date = obx.QueryDateProperty<Bill>(_entities[0].properties[2]);

  /// See [Bill.client].
  static final client =
      obx.QueryRelationToOne<Bill, Client>(_entities[0].properties[3]);
}

/// [Client] entity fields to define ObjectBox queries.
class Client_ {
  /// See [Client.id].
  static final id =
      obx.QueryIntegerProperty<Client>(_entities[1].properties[0]);

  /// See [Client.phone].
  static final phone =
      obx.QueryStringProperty<Client>(_entities[1].properties[1]);

  /// See [Client.name].
  static final name =
      obx.QueryStringProperty<Client>(_entities[1].properties[2]);

  /// See [Client.address].
  static final address =
      obx.QueryStringProperty<Client>(_entities[1].properties[3]);

  /// See [Client.hood].
  static final hood =
      obx.QueryStringProperty<Client>(_entities[1].properties[4]);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// See [Product.id].
  static final id =
      obx.QueryIntegerProperty<Product>(_entities[2].properties[0]);

  /// See [Product.code].
  static final code =
      obx.QueryStringProperty<Product>(_entities[2].properties[1]);

  /// See [Product.name].
  static final name =
      obx.QueryStringProperty<Product>(_entities[2].properties[2]);

  /// See [Product.buyPrice].
  static final buyPrice =
      obx.QueryIntegerProperty<Product>(_entities[2].properties[3]);

  /// See [Product.sellPrice].
  static final sellPrice =
      obx.QueryIntegerProperty<Product>(_entities[2].properties[4]);

  /// See [Product.stock].
  static final stock =
      obx.QueryIntegerProperty<Product>(_entities[2].properties[5]);
}
